#!/system/bin/sh
#
# A simple Samsung services disabler by Ian Macdonald.
# Enhanced by afaneh92 for Galaxy S22 - https://github.com/mohammad92/android_device_samsung_g0s
# Then enhanced by vitalif for Galaxy A73 - https://yourcmc.ru/git/vitalif/multidisabler-a73 :-)
# Then adapted by Mrsiri for Galaxy M23 :-D
# With F2FS and "SUPER" partition support.
#
# Use this _JUST_ after installing TWRP to prime your device!
#
# What does it do:
# - Makes /vendor, /system and /product read-write and converts /system to ext4
#   (TODO: Convert /vendor and /product to ext4 too)
# - Disables file-based encryption on /data
# - Disables full-disk encryption on /data
# - Disables stock recovery restoration
# - Disables Vaultkeeper, proca and other bits from standard multidisabler:
#   TLC HDM/ICCC/KG, CASS, WSM, FRP
#

arg1="$1"
arg2="$2"
arg3="$3"
VER=3.7.3.0s
RSTATUS="TestBeta-v"

n="
"
case $0 in
*data*user*flash*update-binary*)

    write_moduele_prop() {
        echo "id=RO2RWMAGISK"
        echo "name=RO2RW"
        echo "version=$VER"
        echo "versionCode=$(echo $VER | sed 's|\.||g')"
        echo "author=LeeGarChat"
        echo "description=Group TG @PocoF3DFE. For start script, go to terminal and write RO2RW"
    }
    write_ro2rw_bin() {
        echo '#!/system/bin/sh'
        echo 'chmod 777  /data/adb/modules/RO2RW/install.sh'
        echo '[ -f  /data/adb/modules/RO2RW/install.sh ] && {'
        echo '/data/adb/modules/RO2RW/install.sh "terminal" 2 "/data/adb/modules/RO2RW/install.zip" "magisk"'
        echo 'exit $?'
        echo '}'
    }
    echo -e "\n"
    echo -e " - Unpacking tools: RO2RW for Magisk $RSTATUS$VER"
    sleep 1

    rm -rf /data/adb/modules/RO2RW
    mkdir -p \
        /data/adb/modules/RO2RW/system/bin \
        /data/adb/modules/RO2RW/RO2RW.files

    cp $3 /data/adb/modules/RO2RW/install.zip
    cp $0 /data/adb/modules/RO2RW/install.sh

    /data/adb/magisk/busybox unzip -o "$arg3" "*" -d "/data/adb/modules/RO2RW/RO2RW.files" &>/dev/null

    write_moduele_prop >>/data/adb/modules/RO2RW/module.prop
    write_ro2rw_bin >>/data/adb/modules/RO2RW/system/bin/RO2RW

    cp /data/adb/modules/RO2RW/system/bin/RO2RW /data/adb/modules/RO2RW/system/bin/ro2rw
    chmod 777 /data/adb/modules/RO2RW/RO2RW.files/*
    chmod 777 /data/adb/modules/RO2RW/system/bin/*
    echo -e "\n"
    if [ -f /system/bin/RO2RW ] && (grep -q "magisk" /system/bin/RO2RW); then
        echo -e " - Complete updating RO2RW"
        echo -e " - You can use script. \n - Open any terminal, give su \n   permission, and write RO2RW or ro2rw"
    else
        echo -e " - Complite, please reboot you device"
        echo -e " - After reboot, you can use script. \n - Open any terminal, give su \n   permission, and write RO2RW or ro2rw"
    fi
    sleep 1
    echo -e "\n"
    echo -e " - TG group: @MFPupdate\n - TG chat: @PocoF3DFE\n - Author: @LeeGarChat"

    exit 0
    ;;
esac

read_main_dir(){

full_path="$1"
while true ; do 
    full_path="$(dirname "$full_path")"
    low_dir="${full_path%\/*}"
    [ -z "$low_dir" ] && break
done
echo "$full_path"

}

(mountpoint -q /data) || { 
    mount /data || {
    umount /data
    }
}
(mountpoint -q /data) && {
    TMP_NEO=/data/local/TMP_NEO
    TMP_IMGS=/data/local/TMP_NEO/imgs
    NEO_LOGS=/data/media/0/NEO.LOGS
    check_size_main_path=/data
} || {
    TMP_NEO=/dev/TMP_NEO
    TMP_IMGS="$(read_main_dir "$arg3")/NEO.IMGS/imgs"
    NEO_LOGS="$(read_main_dir "$arg3")/NEO.LOGS"
    check_size_main_path=$(read_main_dir "$arg3")
    #my_print "Need mount data, OTG and encrypted data not supported"
    #exit 123
}


if [ -d $TMP_IMGS ]; then
    for file in $TMP_IMGS/*; do
        [ -d $file ] && {
            while (mountpoint -q $file); do
                umount -fl $file >>/dev/null
            done
        }
    done
fi
magisk_on_system=false
case $4 in
    magisk) magisk_on_system=true ;;
    *) magisk_on_system=false ;;
esac

rm -rf $TMP_NEO

mkdir -pv $TMP_NEO/ &>>/dev/null
mkdir -pv $TMP_IMGS/ &>>/dev/null
LOG=$TMP_NEO/log.file.txt

getprop &>>$LOG

ls /dev/block/by-name/* /dev/block/* /dev/block/mapper/* &>>$LOG

cd "$TMP_NEO"
$magisk_on_system && {
    cp -R /data/adb/modules/RO2RW/RO2RW.files/* $TMP_NEO/
} || {
    unzip -o "$arg3" -d "$TMP_NEO" &>>$LOG || \
    unzip -o "$arg3" &>>$LOG
}
cp $TMP_NEO/arm64/bootctl $TMP_NEO/arm32/
cp $TMP_NEO/arm64/erofs $TMP_NEO/arm32/

chmod -R 777 $TMP_NEO &>>$LOG
chmod 777 $TMP_NEO/arm32/* &>>$LOG
chmod 777 $TMP_NEO/arm32/lib/* &>>$LOG
chmod 777 $TMP_NEO/arm64/* &>>$LOG
chmod 777 $TMP_NEO/arm64/lib/* &>>$LOG

case "$(file /system/bin/sh)" in
    *"symbolic link"*)
        case "$(file $(readlink /system/bin/sh))" in
        *"32-bit "*" arm"*) arch=arm32
        ;;
        *"64-bit "*" arm64"*) arch=arm64
        ;;
        esac
        
    ;;
    *"32-bit "*" arm"*) arch=arm32
    ;;
    *"64-bit "*" arm64"*) arch=arm64
    ;;
esac


sed -i 's|VER="EXAMPLE"|VER="'$VER'"|' $TMP_NEO/install.sh
sed -i 's|RSTATUS="EXAMPLE"|RSTATUS="'$RSTATUS'"|' $TMP_NEO/install.sh
sed -i 's|#EXAMPLE_SH|#!'$TMP_NEO/$arch'/bash|' $TMP_NEO/install.sh
sed -i 's|arch="EXAMPLE"|arch='$arch'|' $TMP_NEO/install.sh

$TMP_NEO/$arch/bash $TMP_NEO/install.sh "$1" "$2" "$3" "$4" "$5"
exit $?

#
# End of RO2RW code
#

set -e

md5() {
  md5sum -b "$1"
}

file_changed() {
  local file="$1"
  local old_md5="$2"
  local new_md5=$( md5 "$file" )

  if [ $new_md5 != $old_md5 ]; then
    echo " -     ...modified."
  else
    echo " -     ...unchanged."
  fi
}

rm_from_manifest() {
  local service=$1
  local md5
  local i

  # Remove security HALs from manifests
  #
  local path_extra='\.hardware'

  for i in /vendor/etc/vintf/manifest.xml \
    $ANDROID_ROOT/system/etc/vintf/compatibility_matrix.device.xml \
    /vendor/etc/vintf/manifest/vaultkeeper_manifest.xml \
    /vendor/etc/vintf/manifest/wsm_manifest.xml; do
    if [ -f $i ]; then
      echo " -   Found $i."
      md5=$( md5 $i )
      sed -i -e '/<hal format="hidl">/{N;/<name>vendor\.samsung'"$path_extra"'\.security\.'"$service"'<\/name>/{:loop;N;/<\/hal>/!bloop;d}}' $i
      # file_changed $i $md5
    fi
  done
}

resize_fs() {
  local path=$1
  local label=$2
  local partname=$3
  local percent=$4
  local convert_fs=$5
  local dm_block_ext4=$(df -t ext4 | grep "$path"'$' | cut -DF1)
  local dm_block_f2fs=$(df -t f2fs | grep "$path"'$' | cut -DF1)

  if [ "$dm_block_ext4" ]; then
    echo " - Unmounting $path..."
    umount $path
    echo " - Checking $path block partition before resizing..."
    e2fsck -f $dm_block_ext4
    echo " - Resizing the filesystem on $dm_block_ext4..."
    resize2fs $dm_block_ext4
    echo " - Make the $path partition R/W by unsharing its blocks..."
    e2fsck -E unshare_blocks $dm_block_ext4
  elif [ "$dm_block_f2fs" ]; then
    fs_size_mb=`du -sm $path | cut -f1`
    part_size_mb=`blockdev --getsize64 $dm_block_f2fs | awk '{print int($1 / 1048576)}'`
    super_free_mb=`lptools free | grep Free | awk '{print int($3 / 1048576)}'`
    new_fs_size_mb=`echo $fs_size_mb $super_free_mb $percent | awk '{print int($1 + $2 * $3 / 100)}'`
    if [[ "$new_fs_size_mb" -le "$part_size_mb" ]]; then
      # just in case if we resized the partition, but not the FS
      new_fs_size_mb=$part_size_mb
    fi
    uuid=`toybox blkid $dm_block_f2fs | egrep '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}' -o`
    echo " - Create R/W $partname image..."
    truncate -s ${new_fs_size_mb}M /data/new-rw.img
    if [ "$convert_fs" = "ext4" ]; then
      mke2fs -t ext4 -U $uuid -L $label /data/new-rw.img
    else
      make_f2fs -g android -O project_quota,extra_attr,inode_checksum,sb_checksum,compression,flexible_inline_xattr,verity,inode_crtime -U $uuid -f -l $label /data/new-rw.img
    fi
    mkdir -p /data/new-rw
    mount /data/new-rw.img /data/new-rw
    echo " - Copy old R/O $partname files to our new created image..."
    cp -a --preserve=all $path/* /data/new-rw
    # Android's toybox `cp` is buggy: `cp -a --preserve=all` does NOT preserve selinux contexts
    # on directories and symlinks and you get a bootloop. So we need to restore selinux contexts...
    cd $path
    find . -type dl -exec ls -dZ {} \; | awk '{ print "chcon -h " $0 }' > /data/new-rw-chcon.sh
    cd /data/new-rw
    sh /data/new-rw-chcon.sh
    cd /
    umount $path
    umount /data/new-rw
    echo " - Checking $partname image before flashing..."
    if [ "$convert_fs" = "ext4" ]; then
      e2fsck -f /data/new-rw.img
    else
      fsck.f2fs -f /data/new-rw.img
    fi
    echo " - Resizing partition $partname inside 'super' to $new_fs_size_mb MB using lptools"
    lptools resize $partname $(stat -c '%s' /data/new-rw.img)
    lptools unmap $partname
    lptools map $partname
    echo " - Writing our new R/W $partname image, please wait..."
    dd if=/data/new-rw.img of=/dev/block/bootdevice/by-name/$partname bs=1M
    rm -rf /data/new-rw*
  fi
  echo " - Remounting $path..."
  mount -o rw /dev/block/bootdevice/by-name/$partname $path
}

fs_free_size_check() {
  local path=$1
  local label=$2
  local partname=$3
  local percent=$4
  echo " - Checking $path free space..."
  if dd if=/dev/zero of=$path/test bs=1 count=1 2>/dev/null; then
    echo " -     ...succeeded."
    rm -f $path/test
  else
    echo " -     ...No free space on $path, attempting to resize it..."
    echo " "
    rm -f $path/test
    resize_fs "$path" "$label" "$partname" "$percent"
  fi
}

disable_fbe() {
  local md5
  local i
  fstab_files=`grep -lr 'fileencryption' vendor/etc || true`

  #
  # Exynos devices = fstab.exynos*.
  # MediaTek devices = fstab.mt*.
  # Snapdragon devices = fstab.qcom, fstab.emmc, fstab.default
  #
  for i in $fstab_files; do
    if [ -f $i ]; then
      echo " - Disabling file-based encryption (FBE) for /data..."
      echo " -   Found $i."
      md5=$( md5 $i )
      # This comments out the offending line and adds an edited one.
      sed -i -e 's/^\([^#].*\)fileencryption=[^,]*\(.*\)$/# &\n\1encryptable\2/g' $i
      file_changed $i $md5
    fi
  done
}

disable_fde() {
  local md5
  local i
  fstab_files=`grep -lr 'forceencrypt' vendor/etc || true`

  # Snapdragon devices = fstab.qcom, fstab.emmc, fstab.default
  #
  for i in $fstab_files; do
    if [ -f $i ]; then
      echo " - Disabling full-disk encryption (FDE) for /data..."
      echo " -   Found $i."
      md5=$( md5 $i )
      # This comments out the offending line and adds an edited one.
      sed -i -e 's/^\([^#].*\)forceencrypt=[^,]*\(.*\)$/# &\n\1encryptable\2/g' $i
      file_changed $i $md5
    fi
  done
}

disable_recovery_restoration() {
  local r=recovery-from-boot.p
  local found
  local i

  echo " - Disabling restoration of stock recovery..."

  for i in $ANDROID_ROOT $ANDROID_ROOT/system /vendor; do
    if [ -f $i/$r~ ]; then
      echo " -   ...already disabled."
      found=true
      break
    fi

    if [ -f $i/$r ]; then
      echo " -   Found $i/$r. Disabling..."
      mv $i/$r $i/$r~

      if [ -f $i/$r~ ]; then
        echo " -     ...succeeded."
      else
        echo " -     ...failed."
      fi

      found=true
      break
    fi

  done

  [ -z "$found" ] && echo " -   Found no stock recovery. Pfft." || true
}

disable_vaultkeeper() {
  local md5
  local i

  echo " - Disabling vaultkeeper..."

  # Vaultkeeper has its own init files.
  for i in $ANDROID_ROOT/system/etc/init/vk*.rc /vendor/etc/init/vk*.rc /vendor/etc/init/vaultkeeper*; do
      if [ -f $i ]; then
        echo " -   Found $i."
        md5=$( md5 $i )
        sed -i -e 's/^[^#].*$/# &/' $i
        # file_changed $i $md5
      fi
  done

  # Qualcomm devices such as the T860 and T865 need this, otherwise the log
  # will be spammed with messages about failed connections to the Vaultkeeper
  # service.
  #
  rm_from_manifest vaultkeeper

  for i in $ANDROID_ROOT/system /vendor; do
    if [ -f $i/bin/vaultkeeperd ]; then
      echo " -   Found $i/bin/vaultkeeperd. Disabling..."
      chmod 0 $i/bin/vaultkeeperd
    fi
    if [ -f $i/bin/vendor.samsung.hardware.security.vaultkeeper@2.0-service ]; then
      chmod 0 $i/bin/vendor.samsung.hardware.security.vaultkeeper@2.0-service
    fi
  done
}

disable_proca() {
  local md5
  local i

  echo " - Disabling process authentication..."

  # G97[035]F = pa_daemon.rc on Android 9; pa_daemon_teegris.rc on Android 10.
  # G977B, N97[05]F, A105F, A505F = pa_daemon_teegris.rc
  # T510 + T515 = pa_daemon_kinibi.rc
  # T860 + T865 = pa_daemon_qsee.rc
  #
  for i in /vendor/etc/init/pa_daemon*.rc; do
    if [ -f $i ]; then
      echo " -   Found $i. Disabling..."
      sed -i -e 's/^[^#]/# &/' $i
      # file_changed $i $md5
    fi
  done

  rm_from_manifest proca
}

disable_tlc() {
  echo " - Removing TLC HDM/ICCC/KG..."

  # Fully remove those
  for i in /vendor/etc/vintf/manifest/vendor.samsung.hardware.tlc.hdm@1.1-manifest.xml \
    /vendor/etc/vintf/manifest/vendor.samsung.hardware.tlc.iccc@1.0-manifest.xml \
    /vendor/etc/vintf/manifest/vendor.samsung.hardware.tlc.kg@1.0-manifest.xml \
    /vendor/etc/vintf/manifest/vendor.samsung.hardware.tlc.kg@1.1-manifest.xml; do
    if [ -f $i ]; then
      echo " -   Found $i. Removing..."
      rm $i
    fi
  done

  for manifest in $(ls /vendor/etc/vintf/manifest.xml /vendor/etc/vintf/manifest/manifest.xml); do
    for i in "blockchain" "ucm" "payment"; do
      sed -i -e '/<hal format="hidl">/{N;/<name>vendor\.samsung\.hardware\.tlc\.'"$i"'<\/name>/{:loop;N;/<\/hal>/!bloop;d}}' $manifest
    done
  done

  sed -i 's/^[^#]/# &/' /vendor/etc/init/vendor.samsung.hardware.tlc.*

  sed -i 's/ro\.config\.iccc\_version\=3\.0/ro\.config\.iccc\_version\=iccc\_disabled/g' /system_root/system/build.prop
}

disable_cass() {
  local md5
  local i

  # The T860 needs this. Otherwise, the log will fill with messages like this:
  #
  # 10-20 03:23:20.501 27757 27757 E CASS: Failed to connect(4)
  # 10-20 03:23:20.501 27757 27757 E CASS: Failed to connect ril daemon(2). Retry cnt(6)
  # The F907B on Android 10 also needs it:
  #
  # 04-05 22:21:23.519  3599  3599 E CASS_DEBUG: VaultKeeper is not ready. try again.
  # 04-05 22:21:23.519  3599  3599 I CASS_DEBUG: Disconnect ril daemon
  # 04-05 22:21:23.519  3599  3599 I CASS_DEBUG: Failed to connect ril daemon(1). Retry cnt(2)
  #
  # As of OneUI 2.5, other devices need it, too; even Exynos.
  #
  echo " - Disabling cass..."

  for i in $ANDROID_ROOT/init.rc /vendor/init/cass.rc /vendor/etc/init/cass.rc; do
    if [ -f $i ]; then
      echo " -   Found $i. Disabling..."
      md5=$( md5 $i )
      sed -i -e 's/^[^#].*cass.*$/# &/' -re '/\/(system|vendor)\/bin\/cass/,/^#?$/s/^[^#]*$/#&/' $i
      # file_changed $i $md5
    fi
  done

  sed -i 's/ro\.security\.cass\.feature\=1/ro\.security\.cass\.feature\=0/g' /vendor/build.prop
}

disable_wsm() {
  echo " - Disabling wsm..."
  rm_from_manifest wsm
}

disable_frp() {
  echo " - Disabling Factory Reset Protection (FRP)..."
  sed -i 's/ro\.frp\.pst\=.*/ro\.frp\.pst\=/g' /vendor/build.prop
}

os=$(getprop ro.build.version.release)
major=${os%%.*}
bl=$(getprop ro.boot.bootloader)
dp=$(getprop ro.boot.dynamic_partitions)
device=${bl:0:$((${#bl} - 8))}
mft=$(getprop ro.product.manufacturer | tr '[A-Z]' '[a-z]')

if [ "$mft" != samsung ]; then
  echo " - Device appears not to be made by Samsung."
  fatal=true
elif [ -z "$device" ]; then
  echo " - Could not determine device model."
  fatal=true
if [ -n "$fatal" ]; then
  echo " - Installation aborted."
  echo " "
  exit 1
fi

echo " - Detected a $device device."
echo " "

echo " - Mounting /data..."
mount /data || true
if ! mount | grep '/data ' >/dev/null; then
  echo " -   Mount failed. Aborting..."
  exit 3
fi

echo " - Mounting $ANDROID_ROOT..."
if ! mount | grep "$ANDROID_ROOT " >/dev/null; then
  mount -o rw $ANDROID_ROOT 2>/dev/null || true
  if ! mount | grep "$ANDROID_ROOT " >/dev/null; then
    ANDROID_ROOT=/system_root
    echo " -   Attempt failed. Mounting at $ANDROID_ROOT..."
    if ! mount | grep "$ANDROID_ROOT " >/dev/null; then
      mount -o rw $ANDROID_ROOT
      if ! mount | grep "$ANDROID_ROOT " >/dev/null; then
        echo " -   Even that attempt failed. Aborting..."
        exit 2
      fi
    fi
  fi
fi

echo " - Mounting /vendor..."
mount /vendor || true
mount -o remount,rw /vendor || true
if ! mount | grep '/vendor ' >/dev/null; then
  echo " -   Mount failed. Aborting..."
  exit 3
fi

echo " - Mounting /product..."
mount /product || true
mount -o remount,rw /product || true
if ! mount | grep '/product ' >/dev/null; then
  echo " -   Mount failed. Aborting..."
  exit 3
fi

fs_free_size_check $ANDROID_ROOT "/" system 70 ext4
fs_free_size_check /vendor vendor vendor 50
fs_free_size_check /product product product 50
disable_fbe
disable_fde
disable_recovery_restoration

disable_vaultkeeper
disable_proca
disable_tlc
disable_frp
disable_wsm
disable_cass

echo " - Unmounting /product..."
umount /product
echo " - Unmounting /vendor..."
umount /vendor
echo " - Unmounting $ANDROID_ROOT..."
umount $ANDROID_ROOT

echo " "
echo " - Finished."
echo " "

exit 0
